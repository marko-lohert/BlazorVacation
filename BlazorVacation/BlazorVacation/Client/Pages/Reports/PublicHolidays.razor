@page "/Reports/PublicHolidays"
@page "/Reports/PublicHolidays/{Year}"

@inject HttpClient Http

<h4 class="text-primary">Public holidays in @Year</h4>

Select year: 
<select @bind="SelectedYear" @onclick="(() => { if (SelectedYear != Year) { Year = SelectedYear; ChangeYear(); } })">
@foreach (var year in ListYears)
{
    <option value="@year">@year</option>
}
</select>

<br /><br />

@if (@Holidays != null && Holidays.Count > 0)
{
    <table class="table table-striped">
        <thead class="thead thead-light">
            <tr>
                <th>From</th>
                <th>Till</th>
                <th>Day</th>
                <th>Name</th>
            </tr>
        </thead>
        @foreach (Holiday holiday in Holidays)
        {
        <tr style=@(holiday.FromDate.DayOfWeek==DayOfWeek.Saturday || holiday.FromDate.DayOfWeek==DayOfWeek.Sunday ? "color:red" : "color:green")>
            <td>@holiday.FromDate.ToString("dd.MM.yyyy")</td>
            <td>@holiday.TillDate.ToString("dd.MM.yyyy")</td>
            <td>@holiday.FromDate.DayOfWeek.ToString()</td>
            <td>@holiday.Name</td>
        </tr>
        }
    </table>
}

@code
{
    [Parameter]
    public string? Year { get; set; } // string? instead of int because Year is used as parameter in routing.

    List<Holiday>? Holidays;
    static List<int> ListYears = Enumerable.Range(2019, 3).ToList<int>();
    public string? SelectedYear { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Year))
            Year = DateTime.Now.Year.ToString();
        
        Holidays = await Http.GetJsonAsync<List<Holiday>>($"api/Holidays/GetHolidays?year={Year}");
        
        SelectedYear = Year;
    }

    async Task ChangeYear()
    {
        Holidays = await Http.GetJsonAsync<List<Holiday>>($"api/Holidays/GetHolidays?year={Year}");
        this.StateHasChanged();
    }
}
